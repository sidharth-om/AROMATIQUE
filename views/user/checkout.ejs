<%- include("partials/header") %>

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Checkout - TrendSetter</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
  <!-- Add Razorpay checkout script -->
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
</head>
<body class="bg-gray-50">
  <div class="container mx-auto p-4">
  
    <div class="flex flex-col lg:flex-row gap-8">
      <!-- Left Column - Products and Address -->
      <div class="w-full lg:w-8/12">
        <!-- Products Section -->
        <div class="bg-white rounded-lg shadow-md p-6 mb-6">
          <div class="flex items-center justify-between mb-4">
            <h2 class="text-xl font-semibold">Shopping Cart</h2>
            <span class="text-sm text-gray-500">Price</span>
          </div>
          
          <!-- Product List -->
          <div class="overflow-x-auto">
            <table class="w-full">
              <tbody>
                <% cart.items.forEach((item,index)=>{ %>
                <tr class="border-b border-gray-200">
                  <td class="py-4 pr-4 w-200">
                    <img src="<%= item.productId.images[0] %>" alt="Product" class="object-cover rounded-full mr-10">
                  </td>
                  <td class="py-4 w-full">
                    <h3 class="font-medium text-gray-800"><%= item.productId.name %></h3>
                    <% 
                    // Find the variant that matches the volume in the cart item
                    const variant = item.productId.variants.find(v => v.volume === item.volume);
                    const regularPrice = variant ? variant.regularPrice : 0;
                    const volume = variant ? variant.volume : 0;
                    const quantity = variant ? variant.quantity : 0;
                    
                    // Calculate discounts based on product and category offers
                    const productOffer = item.productId.offer || 0;
                    const categoryOffer = item.productId.categoryId && item.productId.categoryId.offer ? item.productId.categoryId.offer : 0;
                    
                    // Apply the better discount
                    const maxOffer = Math.max(productOffer, categoryOffer);
                    const discountAmount = maxOffer > 0 ? (regularPrice * maxOffer / 100).toFixed(2) : 0;
                    const discountedPrice = (regularPrice - discountAmount).toFixed(2);
                    %>
                    <p class="text-sm text-gray-500">Size: <%= volume %>ml</p>
                    <div class="flex items-center mt-1">
                      <% if (maxOffer > 0) { %>
                        <span class="text-sm text-red-500 line-through mr-2">₹<%= regularPrice %></span>
                        <span class="text-sm font-medium">₹<%= Math.round(discountedPrice) %></span>
                        <span class="text-xs text-green-600 ml-2">(<%= maxOffer %>% off)</span>
                        <% if (productOffer > categoryOffer) { %>
                          <span class="text-xs bg-orange-100 text-orange-800 px-2 py-0.5 rounded ml-2">Product offer</span>
                        <% } else if (categoryOffer > productOffer) { %>
                          <span class="text-xs bg-blue-100 text-blue-800 px-2 py-0.5 rounded ml-2">Category offer</span>
                        <% } %>
                      <% } else { %>
                        <span class="text-sm font-medium">₹<%= regularPrice %></span>
                      <% } %>
                    </div>
                    <div class="flex items-center mt-2">
                      <span class="text-sm mr-4">Qty: <%= item.quantity %></span>
                      <button class="text-blue-600 text-sm hover:text-blue-800">Remove</button>
                    </div>
                  </td>
                  <td class="py-4 font-medium text-right">
                    <% if (maxOffer > 0) { %>
                      <span class="block text-sm text-red-500 line-through">₹<%= regularPrice * item.quantity %></span>
                      <span class="block font-medium">₹<%= (discountedPrice * item.quantity).toFixed(2) %></span>
                    <% } else { %>
                      <span class="block font-medium">₹<%= regularPrice * item.quantity %></span>
                    <% } %>
                  </td>
                </tr>
                <% }) %>
              </tbody>
            </table>
          </div>
        </div>
        
        <!-- Address Section -->
        <div class="bg-white rounded-lg shadow-md p-6 mb-6">
          <h2 class="text-xl font-semibold mb-4">Delivery Address</h2>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
           
            <!-- Address Card -->
            <% address.forEach(addr => { %>
            <div class="border border-gray-200 rounded-lg p-4 relative">
              <input type="radio" name="selectedAddress" id="address1" value="<%= addr._id %>" class="absolute top-4 right-4" checked>
              <div class="inline-block px-2 py-1 bg-gray-100 rounded text-xs font-medium mb-2">HOME</div>
              <h3 class="font-medium"><%= addr.name  %></h3>
              <p class="text-sm text-gray-600 mt-1">
               <%= addr.address  %>
              </p>
              <p class="text-sm mt-2"><%= addr.phoneNumber  %></p>
              <div class="flex mt-3 space-x-3">
                <a href="/user/checkoutEditAddress/<%= addr._id %>" 
                  class="text-sm text-blue-600 hover:text-blue-800">
                 Edit
               </a>
               
                <a href="#" class="btn btn-sm btn-outline-danger toggleAddressStatus" 
                data-address-id="<%= addr._id %>" 
                data-status="<%= addr.status %>">
                 <i class="fas fa-ban me-1"></i> <%= addr.status === 'active' ? 'Delete' : 'Unblock' %>
             </a>
              </div>
            </div>
            <% }) %>
            
            <!-- Add New Address -->
            <div class="border border-dashed border-gray-300 rounded-lg p-4 flex flex-col items-center justify-center text-center">
              <div class="w-10 h-10 rounded-full bg-blue-100 flex items-center justify-center mb-2">
                <i class="fas fa-plus text-blue-600"></i>
              </div>
              <h3 class="font-medium">Add New Address</h3>
              <button class="mt-2 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors text-sm" onclick="window.location.href='/user/addAddress'">Add Address</button>
            </div>
          </div>
        </div>
      </div>

      <!-- Right Column - Order Summary and Payment -->
      <div class="w-full lg:w-4/12">
        <!-- Coupon Section -->
        <div class="bg-white rounded-lg shadow-md p-6 mb-6">
          <h2 class="text-lg font-semibold mb-4">Apply Coupon</h2>
          <div class="flex">
            <input type="text" id="inputCoupon" placeholder="Enter coupon code" class="flex-grow border border-gray-300 rounded-l-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
            <button id="applyButton" class="bg-blue-600 text-white px-4 py-2 rounded-r-md hover:bg-blue-700 transition-colors">Apply</button>
          </div>
          
          <!-- Applied Coupon Display -->
          <div id="appliedCouponContainer" class="mt-4 bg-green-50 border border-green-200 rounded-md p-3 flex justify-between items-center <%= appliedCoupon ? '' : 'hidden' %>">
            <div>
              <div class="flex items-center">
                <i class="fas fa-check-circle text-green-500 mr-2"></i>
                <span class="font-medium text-green-700">Coupon Applied</span>
              </div>
              <p class="text-sm mt-1">
                <span id="appliedCouponCode" class="font-semibold"><%= appliedCoupon ? appliedCoupon.code : '' %></span> - 
                <span id="appliedCouponDesc" class="text-gray-600"><%= appliedCoupon ? appliedCoupon.description : '' %></span>
              </p>
            </div>
            <button id="removeCouponBtn" class="text-red-600 hover:text-red-800 text-sm font-medium">
              <i class="fas fa-times mr-1"></i>Remove
            </button>
          </div>
          
          <!-- Available Coupons Section -->
          <div class="mt-6">
            <h3 class="text-sm font-semibold text-gray-600 mb-3">Available Coupons</h3>
            <div class="space-y-3">
              <% if (availableCoupons && availableCoupons.length > 0) { %>
                <% availableCoupons.forEach(coupon => { %>
             <div class="border border-dashed border-gray-300 rounded-lg p-3 flex justify-between items-center bg-gray-50">
    <div>
        <p class="font-medium text-sm"><%= coupon.code %>
            <% if (coupon.isReferralReward) { %>
                <span class="ml-2 px-2 py-0.5 bg-green-100 text-green-700 text-xs rounded">Referral Coupon</span>
            <% } %>
        </p>
        <p class="text-xs text-gray-500"><%= coupon.description %></p>
        <% if (coupon.minOrderAmount > 0) { %>
            <p class="text-xs text-gray-400">Min order: ₹<%= coupon.minOrderAmount %></p>
        <% } %>
    </div>
    <button class="use-coupon-btn text-sm bg-blue-600 text-white px-3 py-1 rounded hover:bg-blue-700 transition-colors" data-coupon="<%= coupon.code %>">Use</button>
</div>

                <% }) %>
              <% } else { %>
                <p class="text-sm text-gray-500">No coupons available at the moment.</p>
              <% } %>
            </div>
          </div>
        </div>
        
        <!-- Payment Methods -->
        <div class="bg-white rounded-lg shadow-md p-6 mb-6">
          <h2 class="text-lg font-semibold mb-4">Payment Method</h2>
          <div class="space-y-3">
            <!-- COD -->
            <div class="flex items-center p-3 border border-gray-200 rounded-lg">
              <input class="form-check-input payment" type="radio" value="cod" name="payment_option" id="CashOnDelivery" checked>
              <label class="ml-3" for="CashOnDelivery">
                <div class="font-medium">Cash on Delivery</div>
                <div class="text-xs text-gray-500">Pay when your order arrives</div>
              </label>
            </div>
            
            <!-- Razorpay -->
            <div class="flex items-center p-3 border border-gray-200 rounded-lg">
              <input class="form-check-input payment" type="radio" value="razorpay" name="payment_option" id="Razorpay">
              <label class="ml-3" for="Razorpay">
                <div class="font-medium">Razorpay</div>
                <div class="text-xs text-gray-500">Pay securely online</div>
              </label>
              <img src="/images/razorpaylogo.jpg" alt="Razorpay" class="ml-auto"> 
            </div>
            
            <!-- Wallet -->
     <!-- Wallet -->
<div class="flex items-center p-3 border border-gray-200 rounded-lg">
  <input class="form-check-input payment" type="radio" value="wallet" name="payment_option" id="wallet">
  <label class="ml-3" for="wallet">
    <div class="font-medium">Wallet</div>
    <div class="text-xs text-gray-500">Pay using your wallet balance</div>
  </label>
  <div class="ml-auto text-sm font-medium">₹<%= walletBalance %></div>
</div>
          </div>
        </div>
        
        <!-- Order Summary -->
        <div class="bg-white rounded-lg shadow-md p-6">
          <h2 class="text-lg font-semibold mb-4">Order Summary</h2>
          <div class="space-y-3 text-sm">
            <div class="flex justify-between">
              <span>Subtotal</span>
              <span id="subtotalValue">₹<%= subtotal %></span>
            </div>
            
            <div class="flex justify-between">
              <span>Total Offer Discount</span>
              <span id="offerDiscount" class="text-green-600">-₹<%= subtotal - discountedSubtotal %></span>
            </div>

            <div class="flex justify-between">
              <span>Delivery</span>
              <span id="shippingValue" class="<%= shipping === 0 ? 'text-green-600' : '' %>">
                <%= shipping === 0 ? 'FREE' : '₹' + shipping %>
              </span>
            </div>
            
           
            
            <div class="flex justify-between">
              <span>Coupon Discount</span>
              <span id="couponDiscount" class="text-green-600">-₹<%= appliedCoupon ? appliedCoupon.discount : 0 %></span>
            </div>
            
            <div class="flex justify-between border-t border-gray-200 pt-3 font-medium text-base">
              <span>Total Amount</span>
              <span id="totalValue">₹<%= total %></span>
            </div>
            
            <div class="text-green-600 text-xs mt-1">
              You save <span id="totalSavings">₹<%= (subtotal - discountedSubtotal  + (appliedCoupon ? appliedCoupon.discount : 0)) %></span> on this order
            </div>
          </div>
          
          <button type="button" onclick="placeOrder()" id="place-order-btn" class="w-full bg-blue-600 text-white py-3 rounded-lg mt-6 font-medium hover:bg-blue-700 transition-colors">Place Order</button>
          
          <div class="mt-4 flex items-center justify-center text-xs text-gray-500">
            <i class="fas fa-shield-alt mr-2"></i> Safe & Secure Payment
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <%- include("partials/footer") %>

  <script>
    // Main function to place an order
    async function placeOrder() {
        let addressId = $("input[name='selectedAddress']:checked").val();
        let paymentMethod = $("input[name='payment_option']:checked").val();

        const total = parseInt(document.getElementById('totalValue').innerText.replace('₹', ''));
        
        if (!paymentMethod) {
            Swal.fire({
                title: 'NO PAYMENT FOUND!',
                text: 'Please select your Payment.',
                icon: 'error',
                timer: 3000,
            });
            return;
        } else if (!addressId) {
            Swal.fire({
                title: 'NO ADDRESS FOUND!',
                text: 'Please select your address.',
                icon: 'error',
                timer: 3000,
            });
            return;
        }

        // For Razorpay payment
        if (paymentMethod === 'razorpay') {
            try {
                // First, create order on the server
                const orderResponse = await fetch('/user/createRazorpayOrder', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        addressId: addressId,
                        paymentMethod: paymentMethod,
                        total: total
                    })
                });
                
                const orderData = await orderResponse.json();
                
                if (!orderData.success) {
                    throw new Error(orderData.message || 'Failed to create order');
                }
                
                // Initialize Razorpay payment
                const options = {
                    key: orderData.razorpayKeyId, // Your Razorpay Key ID from server
                    amount: orderData.order.amount,
                    currency: orderData.order.currency,
                    name: 'TrendSetter',
                    description: 'Purchase from TrendSetter',
                    order_id: orderData.order.id,
                    handler: async function (response) {
                        // Handle the payment success
                        try {
                            const verifyResponse = await fetch('/user/verifyRazorpayPayment', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({
                                    razorpay_payment_id: response.razorpay_payment_id,
                                    razorpay_order_id: response.razorpay_order_id,
                                    razorpay_signature: response.razorpay_signature,
                                    orderId: orderData.orderId
                                })
                            });
                            
                            const verifyResult = await verifyResponse.json();
                            
                            if (verifyResult.success) {
                                // Payment successful
                                window.location.href = '/user/orderSuccessful';
                            } else {
                                // Payment verification failed
                                window.location.href = '/user/paymentFailed?orderId=' + orderData.orderId;
                            }
                        } catch (error) {
                            console.error("Error verifying payment:", error);
                            window.location.href = '/user/paymentFailed?orderId=' + orderData.orderId;
                        }
                    },
                    prefill: {
                        name: orderData.customerName || '',
                        email: orderData.email || '',
                        contact: orderData.phone || ''
                    },
                    theme: {
                        color: '#3399cc'
                    },
                    modal: {
                        ondismiss: function() {
                            // Handle case where user closes the Razorpay modal
                            Swal.fire({
                                title: 'Payment Cancelled',
                                text: 'You closed the payment window. Do you want to try again?',
                                icon: 'warning',
                                showCancelButton: true,
                                confirmButtonText: 'Yes, try again',
                                cancelButtonText: 'No, go back'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    // User wants to try again
                                    placeOrder();
                                }
                            });
                        }
                    }
                };
                
                // Initialize Razorpay
                const rzp = new Razorpay(options);
                rzp.open();
                
                // Handle payment failures from Razorpay
                rzp.on('payment.failed', function (response) {
                    console.error("Payment failed:", response.error);
                    window.location.href = '/user/paymentFailed?orderId=' + orderData.orderId;
                });
            } catch (error) {
                console.error("Error starting Razorpay payment:", error);
                Swal.fire({
                    title: 'Payment Error',
                    text: error.message || 'Failed to initiate payment. Please try again.',
                    icon: 'error',
                    timer: 3000,
                });
            }
        } else {
            // For COD or wallet payment, use existing flow
            try {
                const response = await fetch('/user/placeOrder', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        addressId: addressId,
                        paymentMethod: paymentMethod,
                        total: total
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    window.location.href = result.redirectUrl;
                } else {
                    Swal.fire({
                        title: 'Order Failed',
                        text: result.message || 'Something went wrong',
                        icon: 'error',
                        timer: 3000,
                    });
                }
                
            } catch (error) {
                console.error("Error placing order:", error);
                Swal.fire({
                    title: 'Error',
                    text: 'Failed to place order. Please try again.',
                    icon: 'error',
                    timer: 3000,
                });
            }
        }
    }

    // Coupon management functionality - Updated to work with backend
    document.addEventListener('DOMContentLoaded', function() {
        // Apply coupon button event listener
        document.getElementById('applyButton').addEventListener('click', applyCoupon);
        
        // Remove coupon button event listener
        document.getElementById('removeCouponBtn').addEventListener('click', removeCoupon);
        
        // Add event listeners to all "Use" buttons
        document.querySelectorAll('.use-coupon-btn').forEach(button => {
            button.addEventListener('click', function() {
                const couponCode = this.getAttribute('data-coupon');
                document.getElementById('inputCoupon').value = couponCode;
                applyCoupon();
            });
        });
        
        // Apply coupon function - calls backend API
        async function applyCoupon() {
            const couponCode = document.getElementById('inputCoupon').value.trim();
            
            if (!couponCode) {
                showNotification('error', 'Please enter a coupon code');
                return;
            }
            
            try {
                // Show loading state
                document.getElementById('applyButton').innerHTML = 'Applying...';
                document.getElementById('applyButton').disabled = true;
                
                const response = await fetch('/user/validateCoupon', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        couponCode: couponCode
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    // Update UI with applied coupon
                    document.getElementById('appliedCouponCode').innerText = couponCode.toUpperCase();
                    document.getElementById('appliedCouponDesc').innerText = result.couponDescription;
                    document.getElementById('appliedCouponContainer').classList.remove('hidden');
                    
                    // Update order summary values
                    updateOrderSummary(result);
                    
                    showNotification('success', result.message);
                } else {
                    showNotification('error', result.message);
                }
                
            } catch (error) {
                console.error('Error applying coupon:', error);
                showNotification('error', 'An error occurred while applying the coupon');
            } finally {
                // Reset button state
                document.getElementById('applyButton').innerHTML = 'Apply';
                document.getElementById('applyButton').disabled = false;
            }
        }
        
        // Remove coupon function - calls backend API
        async function removeCoupon() {
            try {
                const response = await fetch('/user/removeCoupon', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                const result = await response.json();
                
                if (result.success) {
                    // Update UI - hide applied coupon
                    document.getElementById('inputCoupon').value = '';
                    document.getElementById('appliedCouponContainer').classList.add('hidden');
                    
                    // Update order summary values
                    updateOrderSummaryAfterRemoval(result);
                    
                    showNotification('success', result.message);
                } else {
                    showNotification('error', result.message);
                }
                
            } catch (error) {
                console.error('Error removing coupon:', error);
                showNotification('error', 'An error occurred while removing the coupon');
            }
        }
        
        // Update order summary after coupon is applied
        function updateOrderSummary(result) {
            document.getElementById('couponDiscount').innerText = `-₹${result.couponDiscount}`;
            document.getElementById('totalValue').innerText = `₹${result.newTotal}`;
            // document.getElementById('systemDiscount').innerText = `-₹${"result.systemDiscount"}`;
            document.getElementById('shippingValue').innerText = result.shipping === 0 ? 'FREE' : `₹${result.shipping}`;
            
            // Calculate total savings
            const offerDiscount = parseInt(document.getElementById('offerDiscount').innerText.replace('-₹', ''));
            const totalSavings = offerDiscount  + result.couponDiscount;
            document.getElementById('totalSavings').innerText = `₹${totalSavings}`;
        }
        
        // Update order summary after coupon is removed
        function updateOrderSummaryAfterRemoval(result) {
            document.getElementById('couponDiscount').innerText = `-₹0`;
            document.getElementById('totalValue').innerText = `₹${result.newTotal}`;
            // document.getElementById('systemDiscount').innerText = `-₹${"result.systemDiscount"}`;
            document.getElementById('shippingValue').innerText = result.shipping === 0 ? 'FREE' : `₹${result.shipping}`;
            
            // Calculate total savings without coupon
            const offerDiscount = parseInt(document.getElementById('offerDiscount').innerText.replace('-₹', ''));
            const totalSavings = offerDiscount 
            document.getElementById('totalSavings').innerText = `₹${totalSavings}`;
        }
        
        // Show notification using SweetAlert
        function showNotification(type, message) {
            Swal.fire({
                icon: type,
                title: type === 'error' ? 'Error' : type === 'warning' ? 'Warning' : 'Success',
                text: message,
                timer: 3000,
                timerProgressBar: true,
                toast: true,
                position: 'top-end',
                showConfirmButton: false
            });
        }
    });

    // Address delete functionality
    document.addEventListener('DOMContentLoaded', function() {
        // Select all delete buttons
        const deleteButtons = document.querySelectorAll('.toggleAddressStatus');

        deleteButtons.forEach(button => {
            button.addEventListener('click', async function(event) {
                event.preventDefault();

                const addressId = this.getAttribute('data-address-id');

                if (!addressId) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Address ID not found!'
                    });
                    return;
                }

                // Replace confirm with SweetAlert confirmation
                const result = await Swal.fire({
                    title: 'Are you sure?',
                    text: "You want to delete this address?",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, delete it!'
                });

                if (!result.isConfirmed) {
                    return;
                }

                const response = await fetch('/user/checkoutDeleteAddress', {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ addressId })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: 'Address deleted successfully!'
                    }).then(() => {
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: data.message || "Failed to delete address. Please try again."
                    });
                }
            });
        });
    });
  </script>
</body>
</html>