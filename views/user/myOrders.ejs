<%- include("partials/header") %>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Orders | YourBrand</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        primary: {
                            DEFAULT: '#2874f0',
                            dark: '#1a56db',
                            light: '#4b97ff',
                        },
                        secondary: {
                            DEFAULT: '#fb641b',
                            dark: '#e85a16',
                            light: '#ff7a3d',
                        }
                    }
                }
            }
        }
    </script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
</head>

<body class="bg-gray-50 font-sans text-gray-800 antialiased min-h-screen">
    <!-- Main Content -->
    <main class="container mx-auto px-4 py-8 max-w-6xl">
        <!-- Breadcrumb -->
        <div class="mb-6 text-sm bg-white px-4 py-3 rounded-lg shadow-sm">
            <ul class="flex text-gray-600 items-center">
                <li><a href="/" class="hover:text-primary transition-colors duration-200">Home</a></li>
                <li class="mx-2 text-gray-400"><i class="fas fa-chevron-right text-xs"></i></li>
                <li><a href="/account" class="hover:text-primary transition-colors duration-200">My Account</a></li>
                <li class="mx-2 text-gray-400"><i class="fas fa-chevron-right text-xs"></i></li>
                <li class="text-primary font-medium">My Orders</li>
            </ul>
        </div>

        <div class="flex flex-col md:flex-row gap-6">
            <!-- Right Content - Orders -->
            <div class="w-full">
                <!-- Page Title -->
                <div class="mb-6">
                    <h1 class="text-2xl md:text-3xl font-bold text-gray-800">My Orders</h1>
                    <p class="text-gray-600 mt-1">Track, manage, and review your orders</p>
                    <% if (pagination && pagination.totalOrders > 0) { %>
                        <p class="text-sm text-gray-500 mt-2">
                            Showing <%= pagination.startIndex %>-<%= pagination.endIndex %> of <%= pagination.totalOrders %> orders
                        </p>
                    <% } %>
                </div>
                
                <!-- Search Bar -->
                <div class="flex mb-6 bg-white p-2 rounded-lg shadow-sm">
                    <div class="flex w-full">
                        <input 
                            type="text" 
                            id="orderSearch" 
                            placeholder="Search by order ID, product name, status..." 
                            value="<%= searchQuery || '' %>" 
                            class="flex-grow p-3 border border-gray-200 rounded-l-md focus:outline-none focus:ring-2 focus:ring-primary/50 focus:border-primary transition-all duration-200 placeholder-gray-400"
                        >
                        <button 
                            id="searchBtn" 
                            type="button" 
                            class="bg-primary hover:bg-primary-dark text-white px-6 py-3 rounded-r-md transition duration-200 font-medium flex items-center"
                        >
                            <i class="fas fa-search mr-2"></i> Search
                        </button>
                    </div>
                </div>

                <!-- Clear Search -->
                <% if (searchQuery) { %>
                    <div class="mb-4 bg-blue-50 border border-blue-200 rounded-lg p-3">
                        <div class="flex items-center justify-between">
                            <span class="text-sm text-blue-800">
                                <i class="fas fa-search mr-2"></i>
                                Search results for: "<%= searchQuery %>"
                                <% if (pagination && pagination.totalOrders > 0) { %>
                                    (<%= pagination.totalOrders %> result<%= pagination.totalOrders > 1 ? 's' : '' %> found)
                                <% } %>
                            </span>
                            <button 
                                id="clearSearch" 
                                class="text-blue-600 hover:text-blue-800 text-sm font-medium"
                            >
                                Clear search
                            </button>
                        </div>
                    </div>
                <% } %>

                <!-- Loading indicator -->
                <div id="loadingIndicator" class="hidden text-center py-8">
                    <i class="fas fa-spinner fa-spin text-primary text-2xl"></i>
                    <p class="text-gray-600 mt-2">Searching...</p>
                </div>

                <!-- Orders List -->
                <div class="space-y-6" id="ordersContainer">
                    <% if (orders && orders.length > 0) { %>
                        <% orders.forEach((order) => { %>
                            <div class="bg-white rounded-lg shadow-sm overflow-hidden border border-gray-100 hover:shadow-md transition-shadow duration-200">
                                <!-- Order Header -->
                                <div class="bg-gray-50 p-4 border-b border-gray-100">
                                    <div class="flex flex-wrap justify-between items-center gap-4">
                                        <div>
                                            <h3 class="font-semibold text-gray-800">Order #<span class="text-primary"><%= order.orderId %></span></h3>
                                            <p class="text-sm text-gray-500 mt-1">Placed on <%= new Date(order.createdAt).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' }) %></p>
                                        </div>
                                        <div class="flex flex-wrap gap-3">
                                            <% if (order.status === 'pending') { %>
                                                <button type="button" 
                                                    class="bg-red-50 text-red-600 hover:bg-red-100 text-sm font-medium py-2 px-4 rounded-full transition-colors duration-200 flex items-center"
                                                    onclick="cancelEntireOrder('<%= order.orderId %>')">
                                                    <i class="fas fa-times-circle mr-2"></i> Cancel Order
                                                </button>
                                            <% } %>
                                            <% if (order.paymentStatus === 'failed') { %>
                                                <button 
                                                    class="bg-yellow-500 text-white text-sm font-medium py-2 px-4 rounded-full hover:bg-yellow-600 transition-colors duration-200 flex items-center"
                                                    onclick="retryPayment('<%= order._id %>')">
                                                    <i class="fas fa-redo mr-2"></i> Retry Payment
                                                </button>
                                            <% } %>
                                        </div>
                                    </div>
                                </div>
                                
                                <% order.items.forEach((item, index) => { %>
                                    <input type="hidden" id="orderID" value='<%= order.orderId %>'>
                                    <!-- Order item -->
                                    <div class="p-4 border-b border-gray-100 hover:bg-gray-50 transition-colors duration-200">
                                        <div class="flex flex-col sm:flex-row items-start sm:items-center gap-4">
                                            <div class="sm:w-20 h-20 flex-shrink-0 bg-gray-50 p-2 rounded-md border border-gray-100">
                                                <img src="<%= item.productId.images[0] %>" alt="<%= item.productId.name %>" class="w-full h-full object-contain">
                                            </div>
                                            <div class="flex-grow">
                                                <h3 class="font-medium text-gray-800 hover:text-primary transition-colors duration-200"><%= item.productId.name %></h3>
                                                <div class="text-sm text-gray-500 flex flex-wrap gap-2 mt-2">
                                                    <% if (item.volume) { %>
                                                        <span class="bg-gray-100 px-2 py-1 rounded-full text-xs">Volume: <%= item.volume %></span>
                                                    <% } %>
                                                    <span class="bg-gray-100 px-2 py-1 rounded-full text-xs">Qty: <%= item.quantity %></span>
                                                </div>
                                                
                                                <!-- Status indicator -->
                                                <div class="flex items-center mt-3">
                                                    <% 
                                                    let statusColor = 'gray';
                                                    let statusIcon = 'circle-info';
                                                    
                                                    if (item.itemStatus === 'delivered') {
                                                        statusColor = 'green';
                                                        statusIcon = 'check-circle';
                                                    } else if (item.itemStatus === 'shipped') {
                                                        statusColor = 'blue';
                                                        statusIcon = 'truck';
                                                    } else if (item.itemStatus === 'processing') {
                                                        statusColor = 'yellow';
                                                        statusIcon = 'clock';
                                                    } else if (item.itemStatus === 'cancelled') {
                                                        statusColor = 'red';
                                                        statusIcon = 'times-circle';
                                                    } else if (item.itemStatus === 'payment failed') {
                                                        statusColor = 'red';
                                                        statusIcon = 'exclamation-circle';
                                                    }
                                                    %>
                                                    <span class="inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium bg-<%= statusColor %>-100 text-<%= statusColor %>-800">
                                                        <i class="fas fa-<%= statusIcon %> mr-1.5"></i>
                                                        <%= item.itemStatus.charAt(0).toUpperCase() + item.itemStatus.slice(1) %>
                                                    </span>
                                                </div>
                                            </div>
                                            
                                            <% 
                                            const variant = item.productId.variants.find(v => v.volume === item.volume);
                                            const regularPrice = variant ? variant.regularPrice : 0;
                                            %>
                                           
                                            <div class="sm:text-right">
                                                <div class="text-lg font-semibold text-gray-800 mb-3">₹<%= Math.round(item.itemSalePrice) * item.quantity %></div>
                                                
                                                <!-- View Details button -->
                                                <button type="button"
                                                    class="bg-primary text-white text-sm font-medium px-4 py-2 rounded-md hover:bg-primary-dark transition duration-200 flex items-center"
                                                    onclick="viewOrder('<%= order.orderId %>', <%= index %>)">
                                                    View Details
                                                    <i class="fas fa-chevron-right text-xs ml-2"></i>
                                                </button>
                                            </div>
                                        </div>
                                        
                                        <!-- Action buttons -->
                                        <div class="mt-4 flex flex-wrap gap-3 justify-end">
                                            <% if (item.itemStatus === 'delivered') { %>
                                                <button 
                                                    class="px-4 py-2 bg-white border border-gray-300 text-gray-700 rounded-md text-sm hover:bg-gray-50 transition-colors duration-200 flex items-center"
                                                    onclick="returnRequest('<%= order.orderId %>', '<%= item._id %>', '<%= item.productId._id %>', <%= item.quantity %>)">
                                                    <i class="fas fa-undo mr-2"></i> Return Item
                                                </button>
                                                <a href="#" class="px-4 py-2 bg-white border border-gray-300 text-gray-700 rounded-md text-sm hover:bg-gray-50 transition-colors duration-200 flex items-center">
                                                    <i class="fas fa-shopping-cart mr-2"></i> Buy Again
                                                </a>
                                                <a href="#" class="px-4 py-2 bg-primary text-white rounded-md text-sm hover:bg-primary-dark transition-colors duration-200 flex items-center">
                                                    <i class="fas fa-star mr-2"></i> Write a Review
                                                </a>
                                            <% } else if (item.itemStatus === 'shipped') { %>
                                                <a href="#" class="px-4 py-2 bg-primary text-white rounded-md text-sm hover:bg-primary-dark transition-colors duration-200 flex items-center">
                                                    <i class="fas fa-map-marker-alt mr-2"></i> Track Package
                                                </a>
                                            <% } else if (item.itemStatus === 'pending' || item.itemStatus === 'processing') { %>
                                                <button 
                                                    class="px-4 py-2 bg-white border border-gray-300 text-gray-700 rounded-md text-sm hover:bg-gray-50 transition-colors duration-200 flex items-center"
                                                    onclick="cancelOrderItem('<%= order._id %>', '<%= index %>')">
                                                    <i class="fas fa-ban mr-2"></i> Cancel Item
                                                </button>
                                            <% } %>
                                        </div>
                                    </div>
                                <% }); %>
                            </div>
                            
                            <div class="mb-8"></div>
                        <% }); %>
                    <% } else { %>
                        <!-- Empty state -->
                        <div class="bg-white rounded-lg shadow-sm p-12 text-center border border-gray-100">
                            <div class="w-24 h-24 mx-auto mb-6 text-gray-300">
                                <i class="fas fa-shopping-bag text-6xl"></i>
                            </div>
                            <h2 class="text-2xl font-semibold text-gray-800 mb-3">
                                <% if (searchQuery) { %>
                                    No orders found
                                <% } else { %>
                                    No orders yet
                                <% } %>
                            </h2>
                            <p class="text-gray-600 mb-8 max-w-md mx-auto">
                                <% if (searchQuery) { %>
                                    No orders match your search criteria. Try adjusting your search terms.
                                <% } else { %>
                                    Looks like you haven't placed any orders yet. Start shopping to see your orders here.
                                <% } %>
                            </p>
                            <% if (searchQuery) { %>
                                <button 
                                    id="clearSearchBtn" 
                                    class="inline-block py-3 px-8 bg-gray-600 text-white rounded-md hover:bg-gray-700 transition-colors duration-200 shadow-sm hover:shadow mr-4"
                                >
                                    <i class="fas fa-times mr-2"></i> Clear Search
                                </button>
                            <% } %>
                            <a href="/" class="inline-block py-3 px-8 bg-primary text-white rounded-md hover:bg-primary-dark transition-colors duration-200 shadow-sm hover:shadow">
                                <i class="fas fa-shopping-cart mr-2"></i> Start Shopping
                            </a>
                        </div>
                    <% } %>
                </div>

                <!-- Pagination -->
                <% if (pagination && pagination.totalPages > 1) { %>
                    <div class="mt-8 flex justify-center">
                        <nav class="flex items-center space-x-1">
                            <!-- Previous button -->
                            <% if (pagination.hasPrev) { %>
                                <button 
                                    onclick="navigateToPage(<%= pagination.prevPage %>)"
                                    class="px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 hover:text-gray-700 transition-colors duration-200"
                                >
                                    <i class="fas fa-chevron-left"></i> Previous
                                </button>
                            <% } else { %>
                                <span class="px-3 py-2 text-sm font-medium text-gray-300 bg-gray-100 border border-gray-300 rounded-md cursor-not-allowed">
                                    <i class="fas fa-chevron-left"></i> Previous
                                </span>
                            <% } %>

                            <!-- Page numbers -->
                            <% 
                            let startPage = Math.max(1, pagination.currentPage - 2);
                            let endPage = Math.min(pagination.totalPages, pagination.currentPage + 2);
                            
                            if (startPage > 1) {
                            %>
                                <button 
                                    onclick="navigateToPage(1)"
                                    class="px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 hover:text-gray-700 transition-colors duration-200"
                                >
                                    1
                                </button>
                                <% if (startPage > 2) { %>
                                    <span class="px-3 py-2 text-sm font-medium text-gray-500">...</span>
                                <% } %>
                            <% } %>

                            <% for (let i = startPage; i <= endPage; i++) { %>
                                <% if (i === pagination.currentPage) { %>
                                    <span class="px-3 py-2 text-sm font-medium text-white bg-primary border border-primary rounded-md">
                                        <%= i %>
                                    </span>
                                <% } else { %>
                                    <button 
                                        onclick="navigateToPage(<%= i %>)"
                                        class="px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 hover:text-gray-700 transition-colors duration-200"
                                    >
                                        <%= i %>
                                    </button>
                                <% } %>
                            <% } %>

                            <% if (endPage < pagination.totalPages) { %>
                                <% if (endPage < pagination.totalPages - 1) { %>
                                    <span class="px-3 py-2 text-sm font-medium text-gray-500">...</span>
                                <% } %>
                                <button 
                                    onclick="navigateToPage(<%= pagination.totalPages %>)"
                                    class="px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 hover:text-gray-700 transition-colors duration-200"
                                >
                                    <%= pagination.totalPages %>
                                </button>
                            <% } %>

                            <!-- Next button -->
                            <% if (pagination.hasNext) { %>
                                <button 
                                    onclick="navigateToPage(<%= pagination.nextPage %>)"
                                    class="px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 hover:text-gray-700 transition-colors duration-200"
                                >
                                    Next <i class="fas fa-chevron-right"></i>
                                </button>
                            <% } else { %>
                                <span class="px-3 py-2 text-sm font-medium text-gray-300 bg-gray-100 border border-gray-300 rounded-md cursor-not-allowed">
                                    Next <i class="fas fa-chevron-right"></i>
                                </span>
                            <% } %>
                        </nav>
                    </div>

                    <!-- Page info -->
                    <div class="mt-4 text-center text-sm text-gray-600">
                        Page <%= pagination.currentPage %> of <%= pagination.totalPages %>
                        <% if (pagination.totalOrders > 0) { %>
                            | <%= pagination.totalOrders %> total order<%= pagination.totalOrders > 1 ? 's' : '' %>
                        <% } %>
                    </div>
                <% } %>
            </div>
        </div>
    </main>

    <script>
        // Global variables
        let searchTimeout;
        const searchInput = document.getElementById('orderSearch');
        const searchBtn = document.getElementById('searchBtn');
        const clearSearchBtn = document.getElementById('clearSearch');
        const loadingIndicator = document.getElementById('loadingIndicator');
        const ordersContainer = document.getElementById('ordersContainer');

        // Navigation functions
        function navigateToPage(page) {
            const searchQuery = searchInput.value.trim();
            const params = new URLSearchParams();
            
            if (searchQuery) {
                params.append('search', searchQuery);
            }
            params.append('page', page);
            
            window.location.href = `/myOrders?${params.toString()}`;
        }

        function performSearch() {
            const query = searchInput.value.trim();
            const params = new URLSearchParams();
            
            if (query) {
                params.append('search', query);
            }
            
            window.location.href = `/myOrders?${params.toString()}`;
        }

        function clearSearch() {
            window.location.href = '/myOrders';
        }

        // Event listeners
        searchBtn.addEventListener('click', performSearch);

        if (clearSearchBtn) {
            clearSearchBtn.addEventListener('click', clearSearch);
        }

        // Handle clear search button in empty state
        const clearSearchBtnEmpty = document.getElementById('clearSearchBtn');
        if (clearSearchBtnEmpty) {
            clearSearchBtnEmpty.addEventListener('click', clearSearch);
        }

        searchInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                performSearch();
            }
        });

        // Debounced search (optional - for real-time search)
        searchInput.addEventListener('input', function() {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {
                // Optional: implement real-time search here
                // For now, we'll keep it simple with button/enter search
            }, 300);
        });

        // Order management functions
        function viewOrder(orderId, index) {
            console.log('Navigating to order:', orderId, 'item index:', index);
            window.location.href = `/orders/${orderId}/item/${index}`;
        }
        
        function cancelEntireOrder(orderId) {
            Swal.fire({
                title: 'Cancel Order',
                text: 'Please select a reason for cancelling this order:',
                icon: 'warning',
                input: 'select',
                inputOptions: {
                    'Changed my mind': 'Changed my mind',
                    'Found a better price elsewhere': 'Found a better price elsewhere',
                    'Ordered by mistake': 'Ordered by mistake',
                    'Delivery time too long': 'Delivery time too long',
                    'Other': 'Other'
                },
                inputPlaceholder: 'Select a reason',
                showCancelButton: true,
                confirmButtonColor: '#ef4444',
                cancelButtonColor: '#6b7280',
                confirmButtonText: 'Yes, cancel it!',
                cancelButtonText: 'No, keep it',
                inputValidator: (value) => {
                    if (!value) {
                        return 'You need to select a reason!';
                    }
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    submitCancelOrder(orderId, result.value);
                }
            });
        }
        
        function cancelOrderItem(orderId, itemIndex) {
            Swal.fire({
                title: 'Cancel Item',
                text: 'Please select a reason for cancelling this item:',
                icon: 'warning',
                input: 'select',
                inputOptions: {
                    'Changed my mind': 'Changed my mind',
                    'Found a better price elsewhere': 'Found a better price elsewhere',
                    'Ordered by mistake': 'Ordered by mistake',
                    'Delivery time too long': 'Delivery time too long',
                    'Other': 'Other'
                },
                inputPlaceholder: 'Select a reason',
                showCancelButton: true,
                confirmButtonColor: '#ef4444',
                cancelButtonColor: '#6b7280',
                confirmButtonText: 'Yes, cancel it!',
                cancelButtonText: 'No, keep it',
                inputValidator: (value) => {
                    if (!value) {
                        return 'You need to select a reason!';
                    }
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    submitCancelItem(orderId, itemIndex, result.value);
                }
            });
        }
        
        async function submitCancelOrder(orderId, reason) {
            try {
                const response = await fetch(`/cancelEntireOrder/${orderId}`, {
                    method: "POST",
                    headers: {"Content-Type": "application/json"},
                    body: JSON.stringify({ reason })
                });
        
                const result = await response.json();
                if (result.success) {
                    Swal.fire({
                        title: 'Cancelled!',
                        text: result.message || 'Your order has been cancelled successfully.',
                        icon: 'success',
                        confirmButtonColor: '#3b82f6'
                    }).then(() => {
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        title: 'Error!',
                        text: result.message || 'Failed to cancel order',
                        icon: 'error',
                        confirmButtonColor: '#3b82f6'
                    });
                }
            } catch (error) {
                console.error('Error cancelling order:', error);
                Swal.fire({
                    title: 'Error!',
                    text: 'An error occurred while cancelling the order',
                    icon: 'error',
                    confirmButtonColor: '#3b82f6'
                });
            }
        }
        
        async function submitCancelItem(orderId, itemIndex, reason) {
            try {
                const response = await fetch(`/cancelOrder/${orderId}`, {
                    method: "POST",
                    headers: {"Content-Type": "application/json"},
                    body: JSON.stringify({ itemIndex, reason })
                });

                const result = await response.json();
                if (result.success) {
                    Swal.fire({
                        title: 'Cancelled!',
                        text: result.message || 'Your item has been cancelled successfully.',
                        icon: 'success',
                        confirmButtonColor: '#3b82f6'
                    }).then(() => {
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        title: 'Error!',
                        text: result.message || 'Failed to cancel item',
                        icon: 'error',
                        confirmButtonColor: '#3b82f6'
                    });
                }
            } catch (error) {
                console.error('Error cancelling item:', error);
                Swal.fire({
                    title: 'Error!',
                    text: 'An error occurred while cancelling the item',
                    icon: 'error',
                    confirmButtonColor: '#3b82f6'
                });
            }
        }

        async function returnRequest(orderId, itemId, productId, quantity) {
            Swal.fire({
                title: 'Request Return',
                text: 'Please select a reason for returning this item:',
                icon: 'question',
                input: 'select',
                inputOptions: {
                    'Defective product': 'Defective product',
                    'Wrong item received': 'Wrong item received',
                    'Not as described': 'Not as described',
                    'Changed my mind': 'Changed my mind',
                    'Other': 'Other'
                },
                inputPlaceholder: 'Select a reason',
                showCancelButton: true,
                confirmButtonColor: '#3b82f6',
                cancelButtonColor: '#6b7280',
                confirmButtonText: 'Submit Return Request',
                cancelButtonText: 'Cancel',
                inputValidator: (value) => {
                    if (!value) {
                        return 'You need to select a reason!';
                    }
                }
            }).then(async (result) => {
                if (result.isConfirmed) {
                    try {
                        const response = await fetch('/returnRequest', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                orderId,
                                itemId,
                                productId,
                                quantity,
                                reason: result.value
                            })
                        });

                        const resultData = await response.json();
                        if (resultData.success) {
                            Swal.fire({
                                title: 'Success!',
                                text: resultData.message || 'Your return request has been submitted successfully.',
                                icon: 'success',
                                confirmButtonColor: '#3b82f6'
                            }).then(() => {
                                window.location.reload();
                            });
                        } else {
                            Swal.fire({
                                title: 'Error!',
                                text: resultData.message || 'Failed to submit return request',
                                icon: 'error',
                                confirmButtonColor: '#3b82f6'
                            });
                        }
                    } catch (error) {
                        console.error('Error submitting return request:', error);
                        Swal.fire({
                            title: 'Error!',
                            text: 'An error occurred while submitting the return request',
                            icon: 'error',
                            confirmButtonColor: '#3b82f6'
                        });
                    }
                }
            });
        }

        async function retryPayment(orderId) {
            try {
                // Show loading indicator
                Swal.fire({
                    title: 'Initiating Payment',
                    text: 'Please wait while we set up your payment...',
                    icon: 'info',
                    allowOutsideClick: false,
                    showConfirmButton: false,
                    willOpen: () => {
                        Swal.showLoading();
                    }
                });

                // Call the createRazorpayOrder endpoint
                const response = await fetch('/createRazorpayOrder', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ orderId })
                });

                const result = await response.json();

                if (!result.success) {
                    Swal.fire({
                        title: 'Error!',
                        text: result.message || 'Failed to initiate payment',
                        icon: 'error',
                        confirmButtonColor: '#3b82f6'
                    });
                    return;
                }

                // Close loading indicator
                Swal.close();

                // Open Razorpay payment modal
                const options = {
                    key: result.razorpayKeyId,
                    amount: result.order.amount,
                    currency: result.order.currency,
                    name: 'Aromatique',
                    description: `Payment for Order #${result.orderId}`,
                    order_id: result.order.id,
                    handler: async function (response) {
                        try {
                            // Verify payment
                            const verifyResponse = await fetch('/verifyRazorpayPayment', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({
                                    razorpay_payment_id: response.razorpay_payment_id,
                                    razorpay_order_id: response.razorpay_order_id,
                                    razorpay_signature: response.razorpay_signature,
                                    orderId: result.orderId
                                })
                            });

                            const verifyResult = await verifyResponse.json();

                            if (verifyResult.success) {
                                Swal.fire({
                                    title: 'Payment Successful!',
                                    text: verifyResult.message || 'Your payment was successful.',
                                    icon: 'success',
                                    confirmButtonColor: '#3b82f6'
                                }).then(() => {
                                    window.location.href = verifyResult.redirectUrl;
                                });
                            } else {
                                Swal.fire({
                                    title: 'Payment Failed!',
                                    text: verifyResult.message || 'Payment verification failed.',
                                    icon: 'error',
                                    confirmButtonColor: '#3b82f6'
                                }).then(() => {
                                    window.location.href = verifyResult.redirectUrl || '/myOrders';
                                });
                            }
                        } catch (error) {
                            console.error('Error verifying payment:', error);
                            Swal.fire({
                                title: 'Error!',
                                text: 'An error occurred while verifying the payment',
                                icon: 'error',
                                confirmButtonColor: '#3b82f6'
                            });
                        }
                    },
                    prefill: {
                        name: result.customerName,
                        email: result.email,
                        contact: result.phone
                    },
                    theme: {
                        color: '#2874f0'
                    }
                };

                const rzp = new Razorpay(options);
                rzp.on('payment.failed', function (response) {
                    Swal.fire({
                        title: 'Payment Failed!',
                        text: 'The payment attempt was unsuccessful. Please try again.',
                        icon: 'error',
                        confirmButtonColor: '#3b82f6'
                    }).then(() => {
                        window.location.href = `/paymentFailed?orderId=${result.orderId}`;
                    });
                });
                rzp.open();
            } catch (error) {
                console.error('Error initiating payment:', error);
                Swal.fire({
                    title: 'Error!',
                    text: 'An error occurred while initiating the payment',
                    icon: 'error',
                    confirmButtonColor: '#3b82f6'
                });
            }
        }

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            // Focus on search input if there's a search query
            const urlParams = new URLSearchParams(window.location.search);
            if (urlParams.get('search')) {
                searchInput.focus();
            }
        });
    </script>
</body>
</html>
<%- include("partials/footer") %>