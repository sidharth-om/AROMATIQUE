<%- include("partials/header") %>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="csrf-token" content="<%= csrfToken %>">
    <title>Inventory Management</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 font-sans">
    <div class="container mx-auto p-6">
        <h1 class="text-2xl font-bold mb-4">Inventory Management</h1>
        <p class="mb-4">Total Products: <%= totalProducts %></p>

        <div class="bg-white p-6 rounded-lg shadow-md mb-6">
            <form action="/admin/inventory" method="GET" class="flex items-center space-x-4">
                <div class="flex-1">
                    <label for="search" class="block text-sm font-medium text-gray-700">Search Products</label>
                    <input type="text" name="search" id="search" value="<%= searchQuery %>" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                </div>
                <div class="mt-6 flex space-x-2">
                    <button type="submit" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded">Search</button>
                    <a href="/admin/inventory" class="bg-gray-300 hover:bg-gray-400 text-gray-800 px-4 py-2 rounded">Clear</a>
                </div>
            </form>
        </div>



        <div class="bg-white p-6 rounded-lg shadow-md">
            <h2 class="text-xl font-semibold mb-4">Product Inventory</h2>
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Product</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Category</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Brand</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Volume</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Price</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Stock Status</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Stock Management</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        <% if (products && products.length > 0) { %>
                            <% products.forEach(product => { %>
                                <% product.variants.forEach(variant => { %>
                                    <tr>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <div>
                                                <div class="text-sm font-medium text-gray-900"><%= product.name %></div>
                                                <div class="text-sm text-gray-500">ID: <%= product._id %></div>
                                            </div>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500"><%= product.categoryId?.name || 'N/A' %></td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500"><%= product.brand?.name || 'N/A' %></td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500"><%= variant.volume %></td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            <% if (variant.regularPrice) { %>
                                                ₹<%= variant.regularPrice %>
                                            <% } else { %>
                                                Price not set
                                            <% } %>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <span class="stock-status <%= variant.quantity === 0 ? 'text-red-500' : variant.isLowStock ? 'text-yellow-500' : 'text-green-500' %>">
                                                <%= variant.quantity === 0 ? 'Out of Stock' : variant.isLowStock ? `Low Stock (${variant.quantity})` : `In Stock (${variant.quantity})` %>
                                            </span>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            <div class="flex items-center space-x-2">
                                                <button class="decrement-btn bg-gray-300 hover:bg-gray-400 text-gray-800 px-2 py-1 rounded" data-product-id="<%= product._id %>" data-volume="<%= variant.volume %>">-</button>
                                                <input type="number" class="stock-input w-16 border rounded px-2 py-1" value="<%= variant.quantity %>" min="0">
                                                <button class="increment-btn bg-gray-300 hover:bg-gray-400 text-gray-800 px-2 py-1 rounded" data-product-id="<%= product._id %>" data-volume="<%= variant.volume %>">+</button>
                                                <button class="update-stock-btn bg-blue-500 hover:bg-blue-600 text-white px-2 py-1 rounded" data-product-id="<%= product._id %>" data-volume="<%= variant.volume %>">Update</button>
                                            </div>
                                        </td>
                                    </tr>
                                <% }) %>
                            <% }) %>
                        <% } else { %>
                            <tr>
                                <td colspan="7" class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-center">
                                    No products found
                                    <p class="mt-2">Try adjusting your search criteria or add new products to your inventory.</p>
                                </td>
                            </tr>
                        <% } %>
                    </tbody>
                </table>
            </div>
        </div>

        <% if (totalProducts > 0) { %>
            <div class="mt-6 flex items-center justify-between">
                <p class="text-sm text-gray-700">
                    Showing <%= ((currentPage - 1) * 10 + 1) %> to <%= Math.min(currentPage * 10, totalProducts) %> of <%= totalProducts %> products
                </p>
                <% if (totalPages > 1) { %>
                    <div class="flex space-x-2">
                        <% if (currentPage > 1) { %>
                            <a href="/admin/inventory?page=<%= currentPage - 1 %>&search=<%= encodeURIComponent(searchQuery) %>" class="bg-gray-300 hover:bg-gray-400 text-gray-800 px-4 py-2 rounded">Previous</a>
                        <% } %>
                        <% if (currentPage < totalPages) { %>
                            <a href="/admin/inventory?page=<%= currentPage + 1 %>&search=<%= encodeURIComponent(searchQuery) %>" class="bg-gray-300 hover:bg-gray-400 text-gray-800 px-4 py-2 rounded">Next</a>
                        <% } %>
                    </div>
                <% } %>
            </div>
        <% } %>

        <!-- Loading Spinner -->
        <div id="loading-spinner" class="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center hidden z-50">
            <div class="bg-white p-6 rounded-lg shadow-lg">
                <div class="flex items-center space-x-2">
                    <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-500"></div>
                    <p class="text-lg font-medium">Updating stock...</p>
                </div>
            </div>
        </div>

        <!-- Toast Notification -->
        <div id="toast" class="fixed bottom-4 right-4 bg-gray-800 text-white px-4 py-2 rounded-lg shadow-lg hidden z-50">
            <div class="flex items-center justify-between">
                <p id="toast-message"></p>
                <button id="close-toast" class="ml-4 text-gray-300 hover:text-white">×</button>
            </div>
        </div>
    </div>

    <script>
        function showToast(message, type) {
            const toast = document.getElementById('toast');
            const toastMessage = document.getElementById('toast-message');
            
            toastMessage.textContent = message;
            toast.className = `fixed bottom-4 right-4 px-4 py-2 rounded-lg shadow-lg z-50 ${type === 'success' ? 'bg-green-500' : 'bg-red-500'} text-white`;
            toast.classList.remove('hidden');
            
            // Auto-hide after 5 seconds
            setTimeout(() => {
                toast.classList.add('hidden');
            }, 5000);
        }

        function showLoadingSpinner(show) {
            const spinner = document.getElementById('loading-spinner');
            if (show) {
                spinner.classList.remove('hidden');
            } else {
                spinner.classList.add('hidden');
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            // Get CSRF token
            const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
            
            // Update stock button handlers
            const updateButtons = document.querySelectorAll('.update-stock-btn');
            updateButtons.forEach(button => {
                button.addEventListener('click', async (e) => {
                    e.preventDefault();
                    
                    const productId = button.getAttribute('data-product-id');
                    const volume = button.getAttribute('data-volume');
                    const row = button.closest('tr');
                    const input = row.querySelector('.stock-input');
                    const quantity = parseInt(input.value) || 0;

                    console.log('Updating stock:', { productId, volume, quantity });

                    // Validation
                    if (isNaN(quantity) || quantity < 0) {
                        showToast('Please enter a valid quantity (0 or greater)', 'error');
                        return;
                    }

                    if (!productId || !volume) {
                        showToast('Missing product information', 'error');
                        return;
                    }

                    // Disable button during request
                    button.disabled = true;
                    button.textContent = 'Updating...';
                    showLoadingSpinner(true);

                    try {
                        const response = await fetch(`/admin/update/${productId}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-CSRF-Token': csrfToken
                            },
                            body: JSON.stringify({ 
                                volume: volume, 
                                quantity: quantity 
                            })
                        });

                        const data = await response.json();
                        
                        console.log('Server response:', data);

                        if (response.ok && data.success) {
                            showToast(data.message || 'Stock updated successfully', 'success');
                            
                            // Update the stock status display
                            const stockStatusSpan = row.querySelector('.stock-status');
                            if (stockStatusSpan) {
                                let statusText, statusClass;
                                
                                if (data.quantity === 0) {
                                    statusText = 'Out of Stock';
                                    statusClass = 'text-red-500';
                                } else if (data.isLowStock) {
                                    statusText = `Low Stock (${data.quantity})`;
                                    statusClass = 'text-yellow-500';
                                } else {
                                    statusText = `In Stock (${data.quantity})`;
                                    statusClass = 'text-green-500';
                                }
                                
                                stockStatusSpan.textContent = statusText;
                                stockStatusSpan.className = `stock-status ${statusClass}`;
                            }
                            
                            // Update input value to reflect saved quantity
                            input.value = data.quantity;
                            
                        } else {
                            showToast(data.message || 'Failed to update stock', 'error');
                        }

                    } catch (error) {
                        console.error('Stock update error:', error);
                        showToast('Network error occurred. Please try again.', 'error');
                    } finally {
                        // Re-enable button
                        button.disabled = false;
                        button.textContent = 'Update';
                        showLoadingSpinner(false);
                    }
                });
            });

            // Increment button handlers
            const incrementButtons = document.querySelectorAll('.increment-btn');
            incrementButtons.forEach(button => {
                button.addEventListener('click', (e) => {
                    e.preventDefault();
                    const row = button.closest('tr');
                    const input = row.querySelector('.stock-input');
                    const currentValue = parseInt(input.value) || 0;
                    input.value = currentValue + 1;
                });
            });

            // Decrement button handlers
            const decrementButtons = document.querySelectorAll('.decrement-btn');
            decrementButtons.forEach(button => {
                button.addEventListener('click', (e) => {
                    e.preventDefault();
                    const row = button.closest('tr');
                    const input = row.querySelector('.stock-input');
                    const currentValue = parseInt(input.value) || 0;
                    if (currentValue > 0) {
                        input.value = currentValue - 1;
                    }
                });
            });

            // Toast close button
            document.getElementById('close-toast').addEventListener('click', () => {
                document.getElementById('toast').classList.add('hidden');
            });

            // Input validation
            const stockInputs = document.querySelectorAll('.stock-input');
            stockInputs.forEach(input => {
                input.addEventListener('input', (e) => {
                    let value = parseInt(e.target.value);
                    if (isNaN(value) || value < 0) {
                        e.target.value = 0;
                    }
                });
            });
        });
    </script>
</body>
</html>