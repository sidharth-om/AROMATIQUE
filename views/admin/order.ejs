<%- include("partials/header") %>

<!-- order.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Order Management | Admin Dashboard</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
  <!-- SweetAlert2 -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body class="bg-gray-50">
  <div class="min-h-screen flex flex-col">
    <!-- Main content -->
    <div class="container mx-auto px-6 py-8 flex-grow">
      <div class="flex justify-between items-center mb-6">
        <h2 class="text-3xl font-bold text-gray-800">Order Management</h2>
        <div class="flex items-center space-x-3">
          <!-- Search, Sort, and Filter Form -->
          <form id="orderFilterForm" action="/admin/orders" method="GET" class="flex items-center space-x-2">
            <div class="flex items-center space-x-2">
              <span class="text-gray-600">Search:</span>
              <input type="text" id="searchInput" name="search" value="<%= search || '' %>" placeholder="Order ID or Customer Name" class="bg-white border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-indigo-500 w-64">
            </div>
            <div class="flex items-center space-x-2">
              <span class="text-gray-600">Sort:</span>
              <select id="sortBy" name="sortBy" class="bg-white border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-indigo-500">
                <option value="createdAt" <%= sortBy === 'createdAt' ? 'selected' : '' %>>Order Date</option>
                <option value="total" <%= sortBy === 'total' ? 'selected' : '' %>>Total Amount</option>
              </select>
              <select id="sortOrder" name="sortOrder" class="bg-white border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-indigo-500">
                <option value="desc" <%= sortOrder === 'desc' ? 'selected' : '' %>>Descending</option>
                <option value="asc" <%= sortOrder === 'asc' ? 'selected' : '' %>>Ascending</option>
              </select>
            </div>
            <div class="flex items-center space-x-2">
              <span class="text-gray-600">Status:</span>
              <select id="statusFilter" name="status" class="bg-white border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-indigo-500">
                <option value="" <%= !status ? 'selected' : '' %>>All</option>
                <option value="pending" <%= status === 'pending' ? 'selected' : '' %>>Pending</option>
                <option value="confirmed" <%= status === 'confirmed' ? 'selected' : '' %>>Confirmed</option>
                <option value="processing" <%= status === 'processing' ? 'selected' : '' %>>Processing</option>
                <option value="shipped" <%= status === 'shipped' ? 'selected' : '' %>>Shipped</option>
                <option value="delivered" <%= status === 'delivered' ? 'selected' : '' %>>Delivered</option>
                <option value="cancelled" <%= status === 'cancelled' ? 'selected' : '' %>>Cancelled</option>
                <option value="return request" <%= status === 'return request' ? 'selected' : '' %>>Return Request</option>
                <option value="returned" <%= status === 'returned' ? 'selected' : '' %>>Returned</option>
              </select>
            </div>
            <button type="submit" id="filterButton" class="bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded-lg transition duration-200 flex items-center">
              <i class="fas fa-filter mr-2"></i> Apply
            </button>
          </form>
        </div>
      </div>

      <!-- Orders Table -->
      <div class="bg-white rounded-lg shadow-md overflow-hidden">
        <div class="px-6 py-4 border-b border-gray-200 bg-gray-50">
          <h3 class="text-xl font-semibold text-gray-800">Recent Orders (<%= totalOrders %>)</h3>
        </div>
        <div class="overflow-x-auto">
          <% orders.forEach(order => { %>
            <div class="border-b border-gray-200 p-4">
              <div class="flex justify-between items-center mb-4">
                <div>
                  <h4 class="text-lg font-semibold text-gray-800">Order #<%= order.orderId %></h4>
                  <p class="text-sm text-gray-600">Customer: <%= order.userId ? order.userId.fullname : 'Unknown User' %></p>
                  <p class="text-sm text-gray-600">Payment Method: 
                    <span class="<%= order.paymentMethod === 'Credit Card' ? 'text-green-600' : 'text-blue-600' %>">
                      <i class="<%= order.paymentMethod === 'Credit Card' ? 'fas fa-credit-card' : 'fas fa-money-bill-wave' %> mr-1"></i>
                      <%= order.paymentMethod %>
                    </span>
                  </p>
                </div>
              </div>
              <table class="w-full mb-4">
                <thead class="bg-gray-100">
                  <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Product Name</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Quantity</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Price</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Total Amount</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Item Status</th>
                    <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                  </tr>
                </thead>
                <tbody class="divide-y divide-gray-200">
                  <% order.items.forEach((item, index) => { %>
                    <tr class="hover:bg-gray-50 transition-colors">
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-600">
                        <%= item.productId.name %>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-600">
                        <%= item.quantity %>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-600">
                        ₹<%= Math.round(item.itemSalePrice) %>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm font-semibold text-gray-800">
                        ₹<%= Math.round(item.itemSalePrice * item.quantity) %>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm">
                        <select 
                          class="form-select status-dropdown rounded-md py-1 px-2 border text-sm
                          <%= item.itemStatus === 'pending' ? 'bg-yellow-100 text-yellow-800 border-yellow-300' : 
                             item.itemStatus === 'confirmed' ? 'bg-blue-100 text-blue-800 border-blue-300' :
                             item.itemStatus === 'processing' ? 'bg-blue-100 text-blue-800 border-blue-300' :
                             item.itemStatus === 'shipped' ? 'bg-indigo-100 text-indigo-800 border-indigo-300' : 
                             item.itemStatus === 'delivered' ? 'bg-green-100 text-green-800 border-green-300' :
                             item.itemStatus === 'cancelled' ? 'bg-red-100 text-red-800 border-red-300' :
                             item.itemStatus === 'return request' ? 'bg-purple-100 text-purple-800 border-purple-300' :
                             item.itemStatus === 'returned' ? 'bg-purple-100 text-purple-800 border-purple-300' :
                             'bg-gray-100 text-gray-800 border-gray-300' %>"
                          data-order-id="<%= order.orderId %>"
                          data-product-id="<%= item.productId._id %>"
                          data-original-value="<%= item.itemStatus %>"
                          data-is-item="true"
                          <%= (item.itemStatus === 'delivered' || item.itemStatus === 'returned' || item.itemStatus === 'cancelled'||item.itemStatus==='payment failed') ? 'disabled' : '' %>
                        >
                          <option value="pending" <%= item.itemStatus === 'pending' ? 'selected' : '' %>>Pending</option>
                          <option value="confirmed" <%= item.itemStatus === 'confirmed' ? 'selected' : '' %>>Confirmed</option>
                          <option value="processing" <%= item.itemStatus === 'processing' ? 'selected' : '' %>>Processing</option>
                          <option value="shipped" <%= item.itemStatus === 'shipped' ? 'selected' : '' %>>Shipped</option>
                          <option value="delivered" <%= item.itemStatus === 'delivered' ? 'selected' : '' %>>Delivered</option>
                          <option value="cancelled" <%= item.itemStatus === 'cancelled' ? 'selected' : '' %>>Cancelled</option>
                          <option value="return request" <%= item.itemStatus === 'return request' ? 'selected' : '' %>>Return Request</option>
                          <option value="returned" <%= item.itemStatus === 'returned' ? 'selected' : '' %>>Returned</option>
                          <option value="paymentFailed" <%= item.itemStatus === 'payment failed' ? 'selected' : '' %>>payment failed</option>
                        </select>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <button class="text-indigo-600 hover:text-indigo-900 focus:outline-none view-order-btn" 
                                title="View Order" 
                                data-order-id="<%= order.orderId %>"
                                data-product-index="<%= index %>"
                                data-product-id="<%= item.productId._id %>">
                          <i class="fas fa-eye"></i>
                        </button>
                      </td>
                    </tr>
                  <% }); %>
                </tbody>
              </table>
            </div>
          <% }) %>
        </div>
        
        <!-- Pagination -->
        <div class="px-6 py-4 bg-gray-50 border-t border-gray-200 flex items-center justify-between">
          <div class="text-sm text-gray-700">
            Showing <%= (currentPage - 1) * limit + 1 %> to <%= Math.min(currentPage * limit, totalOrders) %> of <%= totalOrders %> orders
          </div>
          <div class="flex items-center space-x-2">
            <a href="/admin/orders?page=<%= currentPage > 1 ? currentPage - 1 : 1 %>&limit=<%= limit %>&search=<%= encodeURIComponent(search || '') %>&sortBy=<%= sortBy %>&sortOrder=<%= sortOrder %>&status=<%= encodeURIComponent(status || '') %>" 
               class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 <%= currentPage === 1 ? 'opacity-50 cursor-not-allowed' : '' %>">
              Previous
            </a>
            <% 
              const maxPagesToShow = 5;
              let startPage = Math.max(1, currentPage - Math.floor(maxPagesToShow / 2));
              let endPage = Math.min(totalPages, startPage + maxPagesToShow - 1);
              
              if (endPage - startPage + 1 < maxPagesToShow) {
                startPage = Math.max(1, endPage - maxPagesToShow + 1);
              }
            %>
            <% for (let i = startPage; i <= endPage; i++) { %>
              <a href="/admin/orders?page=<%= i %>&limit=<%= limit %>&search=<%= encodeURIComponent(search || '') %>&sortBy=<%= sortBy %>&sortOrder=<%= sortOrder %>&status=<%= encodeURIComponent(status || '') %>" 
                 class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md <%= i === currentPage ? 'bg-indigo-600 text-white' : 'text-gray-700 bg-white hover:bg-gray-50' %>">
                <%= i %>
              </a>
            <% } %>
            <a href="/admin/orders?page=<%= currentPage < totalPages ? currentPage + 1 : totalPages %>&limit=<%= limit %>&search=<%= encodeURIComponent(search || '') %>&sortBy=<%= sortBy %>&sortOrder=<%= sortOrder %>&status=<%= encodeURIComponent(status || '') %>" 
               class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 <%= currentPage === totalPages ? 'opacity-50 cursor-not-allowed' : '' %>">
              Next
            </a>
          </div>
        </div>
      </div>

      <%- include("partials/footer") %>
    </div>

    <script>
      document.addEventListener('DOMContentLoaded', function() {
        // Get all status dropdowns
        const statusDropdowns = document.querySelectorAll('.status-dropdown');
        const orderStatusDropdowns = document.querySelectorAll('.order-status-dropdown');
        
        // Add change event listener to each item status dropdown
        statusDropdowns.forEach(dropdown => {
          let originalValue = dropdown.value;
          
          if (dropdown.disabled) {
            return;
          }
          
          dropdown.addEventListener('change', async function(e) {
            const newStatus = this.value.toLowerCase();
            const orderId = this.getAttribute('data-order-id');
            const productId = this.getAttribute('data-product-id');
            
            // Show SweetAlert confirmation
            const result = await Swal.fire({
              title: 'Confirm Status Change',
              html: `Are you sure you want to change the item status in order <strong>#${orderId}</strong> to <strong>${newStatus}</strong>?`,
              icon: 'question',
              showCancelButton: true,
              confirmButtonColor: '#3085d6',
              cancelButtonColor: '#d33',
              confirmButtonText: 'Yes, change it!',
              cancelButtonText: 'Cancel',
              customClass: {
                popup: 'swal2-popup-custom'
              }
            });
            
            if (result.isConfirmed) {
              updateOrderItemStatus(orderId, productId, newStatus, this);
            } else {
              this.value = originalValue;
            }
          });
          
          dropdown.addEventListener('focus', function() {
            originalValue = this.value;
          });
        });
        
        // Add change event listener to each order status dropdown
        orderStatusDropdowns.forEach(dropdown => {
          let originalValue = dropdown.value;
          
          if (dropdown.disabled) {
            return;
          }
          
          dropdown.addEventListener('change', async function(e) {
            const newStatus = this.value.toLowerCase();
            const orderId = this.getAttribute('data-order-id');
            
            // Show SweetAlert confirmation
            const result = await Swal.fire({
              title: 'Confirm Order Status Change',
              html: `Are you sure you want to change order <strong>#${orderId}</strong> status to <strong>${newStatus}</strong>?<br><br><small>This will update all items in this order.</small>`,
              icon: 'warning',
              showCancelButton: true,
              confirmButtonColor: '#3085d6',
              cancelButtonColor: '#d33',
              confirmButtonText: 'Yes, change it!',
              cancelButtonText: 'Cancel',
              customClass: {
                popup: 'swal2-popup-custom'
              }
            });
            
            if (result.isConfirmed) {
              updateOrderStatus(orderId, newStatus, this);
            } else {
              this.value = originalValue;
            }
          });
          
          dropdown.addEventListener('focus', function() {
            originalValue = this.value;
          });
        });
        
        // Function to send order status update to backend
        async function updateOrderStatus(orderId, status, dropdownElement) {
          dropdownElement.disabled = true;
          
          let additionalData = {};
          if (status === 'return request') {
            const { value: reason } = await Swal.fire({
              title: 'Return Request Reason',
              input: 'textarea',
              inputLabel: 'Please enter reason for return request:',
              inputPlaceholder: 'Enter the reason...',
              inputAttributes: {
                'aria-label': 'Enter the reason for return request'
              },
              showCancelButton: true,
              confirmButtonText: 'Submit',
              cancelButtonText: 'Cancel',
              inputValidator: (value) => {
                if (!value) {
                  return 'You need to write a reason!'
                }
              }
            });
            
            if (reason) {
              additionalData.reason = reason;
            } else {
              dropdownElement.disabled = false;
              return;
            }
          }
          
          fetch('/admin/updateStatus', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              orderId: orderId,
              status: status,
              ...additionalData
            })
          })
          .then(handleResponse)
          .then(data => {
            handleSuccess(data, dropdownElement, status);
            
            // Update all item status dropdowns in this order
            const itemDropdowns = document.querySelectorAll(`.status-dropdown[data-order-id="${orderId}"]`);
            itemDropdowns.forEach(itemDropdown => {
              itemDropdown.value = status;
              updateDropdownStyle(itemDropdown, status);
              if (status === 'delivered' || status === 'returned' || status === 'cancelled') {
                itemDropdown.disabled = true;
              } else {
                itemDropdown.disabled = false;
              }
            });
            
            if (status === 'delivered' || status === 'returned' || status === 'cancelled') {
              dropdownElement.disabled = true;
            } else {
              dropdownElement.disabled = false;
            }
          })
          .catch(error => handleError(error, dropdownElement, originalValue))
          .finally(() => {
            if (dropdownElement.value !== 'delivered' && dropdownElement.value !== 'returned' && dropdownElement.value !== 'cancelled') {
              dropdownElement.disabled = false;
            }
          });
        }
        
        // Function to send item status update to backend
        async function updateOrderItemStatus(orderId, productId, status, dropdownElement) {
          dropdownElement.disabled = true;
          
          let additionalData = {};
          if (status === 'return request') {
            const { value: reason } = await Swal.fire({
              title: 'Return Request Reason',
              input: 'textarea',
              inputLabel: 'Please enter reason for return request:',
              inputPlaceholder: 'Enter the reason...',
              inputAttributes: {
                'aria-label': 'Enter the reason for return request'
              },
              showCancelButton: true,
              confirmButtonText: 'Submit',
              cancelButtonText: 'Cancel',
              inputValidator: (value) => {
                if (!value) {
                  return 'You need to write a reason!'
                }
              }
            });
            
            if (reason) {
              additionalData.reason = reason;
            } else {
              dropdownElement.disabled = false;
              return;
            }
          }
          
          fetch('/admin/updateItemStatus', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              orderId: orderId,
              productId: productId,
              status: status,
              ...additionalData
            })
          })
          .then(handleResponse)
          .then(data => {
            handleSuccess(data, dropdownElement, status);
            
            if (status === 'delivered' || status === 'returned' || status === 'cancelled') {
              dropdownElement.disabled = true;
            } else {
              dropdownElement.disabled = false;
            }
          })
          .catch(error => handleError(error, dropdownElement, originalValue))
          .finally(() => {
            if (dropdownElement.value !== 'delivered' && dropdownElement.value !== 'returned' && dropdownElement.value !== 'cancelled') {
              dropdownElement.disabled = false;
            }
          });
        }
        
        // Helper function to handle fetch response
        function handleResponse(response) {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        }
        
        // Handle successful response
        function handleSuccess(data, dropdownElement, status) {
          Swal.fire({
            title: 'Success!',
            text: 'Status updated successfully!',
            icon: 'success',
            timer: 2000,
            showConfirmButton: false,
            toast: true,
            position: 'top-end'
          });
          updateDropdownStyle(dropdownElement, status);
        }
        
        // Handle error
        function handleError(error, dropdownElement, originalValue) {
          console.error('Error updating status:', error);
          Swal.fire({
            title: 'Error!',
            text: 'Failed to update status. Please try again.',
            icon: 'error',
            confirmButtonText: 'OK'
          });
          dropdownElement.value = originalValue;
        }
        
        // Function to update dropdown styling based on status
        function updateDropdownStyle(dropdown, status) {
          dropdown.classList.remove(
            'bg-yellow-100', 'text-yellow-800', 'border-yellow-300',
            'bg-blue-100', 'text-blue-800', 'border-blue-300',
            'bg-indigo-100', 'text-indigo-800', 'border-indigo-300',
            'bg-green-100', 'text-green-800', 'border-green-300',
            'bg-red-100', 'text-red-800', 'border-red-300',
            'bg-purple-100', 'text-purple-800', 'border-purple-300',
            'bg-gray-100', 'text-gray-800', 'border-gray-300'
          );
          
          if (status === 'pending') {
            dropdown.classList.add('bg-yellow-100', 'text-yellow-800', 'border-yellow-300');
          } else if (status === 'confirmed' || status === 'processing') {
            dropdown.classList.add('bg-blue-100', 'text-blue-800', 'border-blue-300');
          } else if (status === 'shipped') {
            dropdown.classList.add('bg-indigo-100', 'text-indigo-800', 'border-indigo-300');
          } else if (status === 'delivered') {
            dropdown.classList.add('bg-green-100', 'text-green-800', 'border-green-300');
          } else if (status === 'cancelled') {
            dropdown.classList.add('bg-red-100', 'text-red-800', 'border-red-300');
          } else if (status === 'return request' || status === 'returned') {
            dropdown.classList.add('bg-purple-100', 'text-purple-800', 'border-purple-300');
          } else {
            dropdown.classList.add('bg-gray-100', 'text-gray-800', 'border-gray-300');
          }
        }
        
        // Handle view order buttons
        const viewOrderButtons = document.querySelectorAll('.view-order-btn');
        viewOrderButtons.forEach(button => {
          button.addEventListener('click', function() {
            const orderId = this.getAttribute('data-order-id');
            const productIndex = this.getAttribute('data-product-index');
            const productId = this.getAttribute('data-product-id');
            window.location.href = `/admin/orderDetail?orderId=${orderId}&productIndex=${productIndex}&productId=${productId}`;
          });
        });

        // Handle form submission for search, sort, and filter
        const form = document.getElementById('orderFilterForm');
        const searchInput = document.getElementById('searchInput');
        const sortBy = document.getElementById('sortBy');
        const sortOrder = document.getElementById('sortOrder');
        const statusFilter = document.getElementById('statusFilter');

        [searchInput, sortBy, sortOrder, statusFilter].forEach(element => {
          element.addEventListener('change', () => {
            form.submit();
          });
        });

        searchInput.addEventListener('keypress', (e) => {
          if (e.key === 'Enter') {
            e.preventDefault();
            form.submit();
          }
        });
      });
    </script>

    <style>
      .swal2-popup-custom {
        border-radius: 12px;
      }
      
      .swal2-title {
        font-size: 1.5em;
        font-weight: 600;
      }
      
      .swal2-content {
        font-size: 1em;
      }
    </style>
  </div>
</body>
</html>