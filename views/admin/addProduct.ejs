<%- include("partials/header") %>

<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <style>
        .container {
            max-width: 600px;
            margin-top: 50px;
        }
        .image-preview {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-top: 10px;
        }
        .image-preview img {
            width: 100px;
            height: 100px;
            object-fit: cover;
            border-radius: 5px;
            border: 1px solid #ccc;
            padding: 2px;
        }
    </style>
</head>

<div class="container">
    <h2 class="text-center mb-4">Add New Product</h2>

    <form enctype="multipart/form-data" id="addProduct">
        <div class="mb-3">
            <label for="name" class="form-label">Product Name</label>
            <input type="text" class="form-control" id="name" name="name">
            <div class="invalid-feedback">Please enter a product name.</div>
        </div>

        <div class="mb-3">
            <label for="brand" class="form-label">Brand</label>
            <select class="form-control" id="brand" name="brand">
                <option value="" disabled selected>Select Brand</option>
            </select>
            <div class="invalid-feedback">Please select a brand.</div>
        </div>

        <div class="mb-3">
            <label for="category" class="form-label">Category</label>
            <select class="form-control" id="category" name="category">
                <option value="" disabled selected>Select Category</option>
            </select>
            <div class="invalid-feedback">Please select a category.</div>
        </div>

        <div class="mb-3">
            <label for="description" class="form-label">Description</label>
            <textarea class="form-control" id="description" name="description" rows="3"></textarea>
            <div class="invalid-feedback">Please enter a description.</div>
        </div>

        <div class="mb-3">
            <label for="images" class="form-label">Product Images</label>
            <input type="file" class="form-control" id="images" name="images" accept="image/*" multiple>
        </div>

        <div class="image-preview" id="imagePreview"></div>

        <div id="variantsContainer">
            <div class="variant-group mb-3">
                <label class="form-label">Variants</label>
                <input type="number" class="form-control mb-2" name="volume_1" placeholder="Volume (e.g. 500ml, 1L)">
                <input type="number" class="form-control mb-2" name="variantPrice_1" placeholder="Price">
                <input type="number" class="form-control mb-2" name="quantity_1" placeholder="Quantity">
            </div>
        </div>

        <button type="button" class="btn btn-secondary mb-3" id="addVariant">Add More Variants</button>
        
        <button type="submit" class="btn btn-primary w-100">Add Product</button>
    </form>

    <div class="text-center mt-3">
        <a href="/products" class="btn btn-secondary">Back to Products</a>
    </div>
</div>

<!-- Modal for Cropping -->
<div class="modal fade" id="cropModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Crop Image</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="img-container">
                    <img id="cropImage" style="width: 100% ;height: 500px; ">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="cropButton">Crop & Save</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>

<script>
    let cropper;
    let imageQueue = [];
    let croppedImages = [];

    document.getElementById("images").addEventListener("change", function(event) {
        imageQueue = [...imageQueue, ...Array.from(event.target.files)];
        processNextImage();
    });

    function processNextImage() {
        if (imageQueue.length === 0 || cropper) return;

        const file = imageQueue.shift();
        const reader = new FileReader();
        reader.onload = function(e) {
            document.getElementById("cropImage").src = e.target.result;
            const cropModal = new bootstrap.Modal(document.getElementById("cropModal"));
            cropModal.show();
        };
        reader.readAsDataURL(file);
    }

    document.getElementById("cropModal").addEventListener("shown.bs.modal", function() {
        event.preventDefault();
        if (cropper) cropper.destroy();
        const image = document.getElementById("cropImage");
        cropper = new Cropper(image, {
            aspectRatio: 1,
            viewMode: 1,
            autoCropArea: 1,
            scalable: true,
            zoomable: true,
            movable: true
        });
    });

    document.getElementById("cropButton").addEventListener("click", function() {
        event.preventDefault();
        const canvas = cropper.getCroppedCanvas();
        canvas.toBlob((blob) => {
            const file = new File([blob], `cropped_${Date.now()}.jpg`, { type: "image/jpeg" });
            croppedImages.push(file);

            console.log("croppedImages:", croppedImages);

            // Show image preview
            const imgElement = document.createElement("img");
            imgElement.src = URL.createObjectURL(file);
            document.getElementById("imagePreview").appendChild(imgElement);

            // Close modal and process next image
            bootstrap.Modal.getInstance(document.getElementById("cropModal")).hide();
            cropper.destroy();
            cropper = null;
            
            // Clear the file input after processing all images
            if (imageQueue.length === 0) {
                document.getElementById("images").value = "";
            }
            
            processNextImage();
        }, "image/jpeg");
    });

    let variantCount = 1; // Start with 1 since we have one variant by default

    document.getElementById("addVariant").addEventListener("click", function() {
        event.preventDefault();
        variantCount++;
        const variantGroup = document.createElement("div");
        variantGroup.classList.add("variant-group", "mb-3");
        variantGroup.innerHTML = `
        ____________________________________________________________________________________
            <input type="number" class="form-control mb-2" name="volume_${variantCount}" placeholder="Volume (e.g. 500ml, 1L)">
            <input type="number" class="form-control mb-2" name="variantPrice_${variantCount}" placeholder="Price">
            <input type="number" class="form-control mb-2" name="quantity_${variantCount}" placeholder="Quantity">
            <button type="button" class="btn btn-danger btn-sm remove-variant" data-variant="${variantCount}">Remove</button>
        `;
        document.getElementById("variantsContainer").appendChild(variantGroup);
    });

    document.getElementById("variantsContainer").addEventListener("click", function(event) {
        event.preventDefault();
        if (event.target.classList.contains("remove-variant")) {
            event.target.parentElement.remove();
        }
    });

    async function fetchCategoriesandBrand() {
        try {
            const categoryResponse = await fetch("/getCatagories");
            const brandResponse = await fetch("/getBrand");

            const categoryResult = await categoryResponse.json();
            const brandResult = await brandResponse.json();

            console.log("catres:", categoryResult);
            console.log("brandres:", brandResult);

            // Category dropdown
            const categorySelect = document.getElementById("category");
            categoryResult.forEach(category => {
                const option = document.createElement("option");
                option.value = category._id;
                option.textContent = category.name;
                categorySelect.appendChild(option);
            });

            // Brand dropdown
            const brandSelect = document.getElementById("brand");
            brandResult.forEach(brand => {
                const option = document.createElement("option");
                option.value = brand._id;
                option.textContent = brand.name;
                brandSelect.appendChild(option);
            });

        } catch (error) {
            console.log(error.message);
        }
    }

    document.addEventListener("DOMContentLoaded", fetchCategoriesandBrand);

    document.getElementById("addProduct").addEventListener("submit", async function(event) {
        event.preventDefault();

        let isValid = true;

        function validateField(id, message) {
            const field = document.getElementById(id);
            if (!field.value.trim() || field.value === "") {
                field.classList.add("is-invalid");
                field.nextElementSibling.textContent = message;
                isValid = false;
            } else {
                field.classList.remove("is-invalid");
                field.classList.add("is-valid");
            }
        }

        validateField("name", "Please enter a product name");
        validateField("brand", "Please select a brand");
        validateField("category", "Please select a category");
        validateField("description", "Please enter the description");

        if (!isValid) {
            return; // Stop form submission if validation fails
        }

        if (croppedImages.length < 4) {
            Swal.fire({
                icon: "warning",
                title: "Minimum 4 Images Required",
                text: "Please upload at least 4 images before submitting."
            });
            return;
        }

        // Create a new FormData object
        const formData = new FormData(this);
        
        // Remove any images that might have been automatically added from the file input
        formData.delete("images");
        
        // Now add only the cropped images
        croppedImages.forEach((file, index) => {
            console.log(`File ${index}:`, file); 
            formData.append("images", file, `image_${index}.jpg`);
        });

        formData.append("variantCount", variantCount);

        try {
            const response = await fetch("/addProducts", {
                method: "POST",
                body: formData
            });

            const result = await response.json();
            Swal.fire({
                icon: result.success ? "success" : "error",
                title: result.success ? "Success" : "Error",
                text: result.message,
            }).then(() => {
                if (result.success) {
                    window.location.href = "/products"; // Redirect after successful submission
                }
            });

        } catch (error) {
            console.log(error.message);
        }
    });

    // Remove validation error when user types
    document.querySelectorAll("input, select, textarea").forEach((element) => {
        element.addEventListener("input", function () {
            this.classList.remove("is-invalid");
        });
    });
</script>

<%- include("partials/footer") %>